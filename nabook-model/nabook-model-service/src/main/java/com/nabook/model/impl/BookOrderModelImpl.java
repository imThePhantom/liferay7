/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nabook.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.nabook.model.BookOrder;
import com.nabook.model.BookOrderModel;
import com.nabook.model.BookOrderSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the BookOrder service. Represents a row in the &quot;nab_BookOrder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link BookOrderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookOrderImpl}.
 * </p>
 *
 * @author phantoan
 * @see BookOrderImpl
 * @see BookOrder
 * @see BookOrderModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class BookOrderModelImpl extends BaseModelImpl<BookOrder>
	implements BookOrderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a book order model instance should use the {@link BookOrder} interface instead.
	 */
	public static final String TABLE_NAME = "nab_BookOrder";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "bookOrderId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "status", Types.VARCHAR },
			{ "billingName", Types.VARCHAR },
			{ "billingCountry", Types.VARCHAR },
			{ "billingCity", Types.VARCHAR },
			{ "billingPrefecture", Types.VARCHAR },
			{ "billingStreet", Types.VARCHAR },
			{ "billingZip", Types.VARCHAR },
			{ "shipToBilling", Types.BOOLEAN },
			{ "shippingName", Types.VARCHAR },
			{ "shippingCountry", Types.VARCHAR },
			{ "shippingCity", Types.VARCHAR },
			{ "shippingPrefecture", Types.VARCHAR },
			{ "shippingStreet", Types.VARCHAR },
			{ "shippingZip", Types.VARCHAR },
			{ "phone", Types.VARCHAR },
			{ "total", Types.VARCHAR },
			{ "tax", Types.INTEGER },
			{ "discount", Types.INTEGER },
			{ "shipfee", Types.VARCHAR },
			{ "payment", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bookOrderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingPrefecture", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingStreet", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("billingZip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shipToBilling", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("shippingName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingCountry", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingPrefecture", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingStreet", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shippingZip", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("phone", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("total", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tax", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("discount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("shipfee", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("payment", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table nab_BookOrder (uuid_ VARCHAR(75) null,bookOrderId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,userId LONG,userName VARCHAR(75) null,status VARCHAR(75) null,billingName VARCHAR(80) null,billingCountry VARCHAR(80) null,billingCity VARCHAR(80) null,billingPrefecture VARCHAR(80) null,billingStreet VARCHAR(255) null,billingZip VARCHAR(75) null,shipToBilling BOOLEAN,shippingName VARCHAR(80) null,shippingCountry VARCHAR(80) null,shippingCity VARCHAR(80) null,shippingPrefecture VARCHAR(80) null,shippingStreet VARCHAR(255) null,shippingZip VARCHAR(75) null,phone VARCHAR(75) null,total VARCHAR(12) null,tax INTEGER,discount INTEGER,shipfee VARCHAR(12) null,payment VARCHAR(12) null)";
	public static final String TABLE_SQL_DROP = "drop table nab_BookOrder";
	public static final String ORDER_BY_JPQL = " ORDER BY bookOrder.bookOrderId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY nab_BookOrder.bookOrderId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.nabook.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.nabook.model.BookOrder"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.nabook.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.nabook.model.BookOrder"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.nabook.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.nabook.model.BookOrder"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 4L;
	public static final long USERID_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long BOOKORDERID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static BookOrder toModel(BookOrderSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		BookOrder model = new BookOrderImpl();

		model.setUuid(soapModel.getUuid());
		model.setBookOrderId(soapModel.getBookOrderId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setStatus(soapModel.getStatus());
		model.setBillingName(soapModel.getBillingName());
		model.setBillingCountry(soapModel.getBillingCountry());
		model.setBillingCity(soapModel.getBillingCity());
		model.setBillingPrefecture(soapModel.getBillingPrefecture());
		model.setBillingStreet(soapModel.getBillingStreet());
		model.setBillingZip(soapModel.getBillingZip());
		model.setShipToBilling(soapModel.getShipToBilling());
		model.setShippingName(soapModel.getShippingName());
		model.setShippingCountry(soapModel.getShippingCountry());
		model.setShippingCity(soapModel.getShippingCity());
		model.setShippingPrefecture(soapModel.getShippingPrefecture());
		model.setShippingStreet(soapModel.getShippingStreet());
		model.setShippingZip(soapModel.getShippingZip());
		model.setPhone(soapModel.getPhone());
		model.setTotal(soapModel.getTotal());
		model.setTax(soapModel.getTax());
		model.setDiscount(soapModel.getDiscount());
		model.setShipfee(soapModel.getShipfee());
		model.setPayment(soapModel.getPayment());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<BookOrder> toModels(BookOrderSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<BookOrder> models = new ArrayList<BookOrder>(soapModels.length);

		for (BookOrderSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.nabook.service.util.ServiceProps.get(
				"lock.expiration.time.com.nabook.model.BookOrder"));

	public BookOrderModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bookOrderId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBookOrderId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bookOrderId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BookOrder.class;
	}

	@Override
	public String getModelClassName() {
		return BookOrder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("bookOrderId", getBookOrderId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("status", getStatus());
		attributes.put("billingName", getBillingName());
		attributes.put("billingCountry", getBillingCountry());
		attributes.put("billingCity", getBillingCity());
		attributes.put("billingPrefecture", getBillingPrefecture());
		attributes.put("billingStreet", getBillingStreet());
		attributes.put("billingZip", getBillingZip());
		attributes.put("shipToBilling", getShipToBilling());
		attributes.put("shippingName", getShippingName());
		attributes.put("shippingCountry", getShippingCountry());
		attributes.put("shippingCity", getShippingCity());
		attributes.put("shippingPrefecture", getShippingPrefecture());
		attributes.put("shippingStreet", getShippingStreet());
		attributes.put("shippingZip", getShippingZip());
		attributes.put("phone", getPhone());
		attributes.put("total", getTotal());
		attributes.put("tax", getTax());
		attributes.put("discount", getDiscount());
		attributes.put("shipfee", getShipfee());
		attributes.put("payment", getPayment());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long bookOrderId = (Long)attributes.get("bookOrderId");

		if (bookOrderId != null) {
			setBookOrderId(bookOrderId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		String status = (String)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String billingName = (String)attributes.get("billingName");

		if (billingName != null) {
			setBillingName(billingName);
		}

		String billingCountry = (String)attributes.get("billingCountry");

		if (billingCountry != null) {
			setBillingCountry(billingCountry);
		}

		String billingCity = (String)attributes.get("billingCity");

		if (billingCity != null) {
			setBillingCity(billingCity);
		}

		String billingPrefecture = (String)attributes.get("billingPrefecture");

		if (billingPrefecture != null) {
			setBillingPrefecture(billingPrefecture);
		}

		String billingStreet = (String)attributes.get("billingStreet");

		if (billingStreet != null) {
			setBillingStreet(billingStreet);
		}

		String billingZip = (String)attributes.get("billingZip");

		if (billingZip != null) {
			setBillingZip(billingZip);
		}

		Boolean shipToBilling = (Boolean)attributes.get("shipToBilling");

		if (shipToBilling != null) {
			setShipToBilling(shipToBilling);
		}

		String shippingName = (String)attributes.get("shippingName");

		if (shippingName != null) {
			setShippingName(shippingName);
		}

		String shippingCountry = (String)attributes.get("shippingCountry");

		if (shippingCountry != null) {
			setShippingCountry(shippingCountry);
		}

		String shippingCity = (String)attributes.get("shippingCity");

		if (shippingCity != null) {
			setShippingCity(shippingCity);
		}

		String shippingPrefecture = (String)attributes.get("shippingPrefecture");

		if (shippingPrefecture != null) {
			setShippingPrefecture(shippingPrefecture);
		}

		String shippingStreet = (String)attributes.get("shippingStreet");

		if (shippingStreet != null) {
			setShippingStreet(shippingStreet);
		}

		String shippingZip = (String)attributes.get("shippingZip");

		if (shippingZip != null) {
			setShippingZip(shippingZip);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		String total = (String)attributes.get("total");

		if (total != null) {
			setTotal(total);
		}

		Integer tax = (Integer)attributes.get("tax");

		if (tax != null) {
			setTax(tax);
		}

		Integer discount = (Integer)attributes.get("discount");

		if (discount != null) {
			setDiscount(discount);
		}

		String shipfee = (String)attributes.get("shipfee");

		if (shipfee != null) {
			setShipfee(shipfee);
		}

		String payment = (String)attributes.get("payment");

		if (payment != null) {
			setPayment(payment);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getBookOrderId() {
		return _bookOrderId;
	}

	@Override
	public void setBookOrderId(long bookOrderId) {
		_bookOrderId = bookOrderId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask |= MODIFIEDDATE_COLUMN_BITMASK;

		if (_originalModifiedDate == null) {
			_originalModifiedDate = _modifiedDate;
		}

		_modifiedDate = modifiedDate;
	}

	public Date getOriginalModifiedDate() {
		return _originalModifiedDate;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public String getStatus() {
		if (_status == null) {
			return StringPool.BLANK;
		}
		else {
			return _status;
		}
	}

	@Override
	public void setStatus(String status) {
		_status = status;
	}

	@JSON
	@Override
	public String getBillingName() {
		if (_billingName == null) {
			return StringPool.BLANK;
		}
		else {
			return _billingName;
		}
	}

	@Override
	public void setBillingName(String billingName) {
		_billingName = billingName;
	}

	@JSON
	@Override
	public String getBillingCountry() {
		if (_billingCountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _billingCountry;
		}
	}

	@Override
	public void setBillingCountry(String billingCountry) {
		_billingCountry = billingCountry;
	}

	@JSON
	@Override
	public String getBillingCity() {
		if (_billingCity == null) {
			return StringPool.BLANK;
		}
		else {
			return _billingCity;
		}
	}

	@Override
	public void setBillingCity(String billingCity) {
		_billingCity = billingCity;
	}

	@JSON
	@Override
	public String getBillingPrefecture() {
		if (_billingPrefecture == null) {
			return StringPool.BLANK;
		}
		else {
			return _billingPrefecture;
		}
	}

	@Override
	public void setBillingPrefecture(String billingPrefecture) {
		_billingPrefecture = billingPrefecture;
	}

	@JSON
	@Override
	public String getBillingStreet() {
		if (_billingStreet == null) {
			return StringPool.BLANK;
		}
		else {
			return _billingStreet;
		}
	}

	@Override
	public void setBillingStreet(String billingStreet) {
		_billingStreet = billingStreet;
	}

	@JSON
	@Override
	public String getBillingZip() {
		if (_billingZip == null) {
			return StringPool.BLANK;
		}
		else {
			return _billingZip;
		}
	}

	@Override
	public void setBillingZip(String billingZip) {
		_billingZip = billingZip;
	}

	@JSON
	@Override
	public boolean getShipToBilling() {
		return _shipToBilling;
	}

	@JSON
	@Override
	public boolean isShipToBilling() {
		return _shipToBilling;
	}

	@Override
	public void setShipToBilling(boolean shipToBilling) {
		_shipToBilling = shipToBilling;
	}

	@JSON
	@Override
	public String getShippingName() {
		if (_shippingName == null) {
			return StringPool.BLANK;
		}
		else {
			return _shippingName;
		}
	}

	@Override
	public void setShippingName(String shippingName) {
		_shippingName = shippingName;
	}

	@JSON
	@Override
	public String getShippingCountry() {
		if (_shippingCountry == null) {
			return StringPool.BLANK;
		}
		else {
			return _shippingCountry;
		}
	}

	@Override
	public void setShippingCountry(String shippingCountry) {
		_shippingCountry = shippingCountry;
	}

	@JSON
	@Override
	public String getShippingCity() {
		if (_shippingCity == null) {
			return StringPool.BLANK;
		}
		else {
			return _shippingCity;
		}
	}

	@Override
	public void setShippingCity(String shippingCity) {
		_shippingCity = shippingCity;
	}

	@JSON
	@Override
	public String getShippingPrefecture() {
		if (_shippingPrefecture == null) {
			return StringPool.BLANK;
		}
		else {
			return _shippingPrefecture;
		}
	}

	@Override
	public void setShippingPrefecture(String shippingPrefecture) {
		_shippingPrefecture = shippingPrefecture;
	}

	@JSON
	@Override
	public String getShippingStreet() {
		if (_shippingStreet == null) {
			return StringPool.BLANK;
		}
		else {
			return _shippingStreet;
		}
	}

	@Override
	public void setShippingStreet(String shippingStreet) {
		_shippingStreet = shippingStreet;
	}

	@JSON
	@Override
	public String getShippingZip() {
		if (_shippingZip == null) {
			return StringPool.BLANK;
		}
		else {
			return _shippingZip;
		}
	}

	@Override
	public void setShippingZip(String shippingZip) {
		_shippingZip = shippingZip;
	}

	@JSON
	@Override
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	@Override
	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	@Override
	public String getTotal() {
		if (_total == null) {
			return StringPool.BLANK;
		}
		else {
			return _total;
		}
	}

	@Override
	public void setTotal(String total) {
		_total = total;
	}

	@JSON
	@Override
	public int getTax() {
		return _tax;
	}

	@Override
	public void setTax(int tax) {
		_tax = tax;
	}

	@JSON
	@Override
	public int getDiscount() {
		return _discount;
	}

	@Override
	public void setDiscount(int discount) {
		_discount = discount;
	}

	@JSON
	@Override
	public String getShipfee() {
		if (_shipfee == null) {
			return StringPool.BLANK;
		}
		else {
			return _shipfee;
		}
	}

	@Override
	public void setShipfee(String shipfee) {
		_shipfee = shipfee;
	}

	@JSON
	@Override
	public String getPayment() {
		if (_payment == null) {
			return StringPool.BLANK;
		}
		else {
			return _payment;
		}
	}

	@Override
	public void setPayment(String payment) {
		_payment = payment;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				BookOrder.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			BookOrder.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BookOrder toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (BookOrder)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BookOrderImpl bookOrderImpl = new BookOrderImpl();

		bookOrderImpl.setUuid(getUuid());
		bookOrderImpl.setBookOrderId(getBookOrderId());
		bookOrderImpl.setGroupId(getGroupId());
		bookOrderImpl.setCompanyId(getCompanyId());
		bookOrderImpl.setCreateDate(getCreateDate());
		bookOrderImpl.setModifiedDate(getModifiedDate());
		bookOrderImpl.setUserId(getUserId());
		bookOrderImpl.setUserName(getUserName());
		bookOrderImpl.setStatus(getStatus());
		bookOrderImpl.setBillingName(getBillingName());
		bookOrderImpl.setBillingCountry(getBillingCountry());
		bookOrderImpl.setBillingCity(getBillingCity());
		bookOrderImpl.setBillingPrefecture(getBillingPrefecture());
		bookOrderImpl.setBillingStreet(getBillingStreet());
		bookOrderImpl.setBillingZip(getBillingZip());
		bookOrderImpl.setShipToBilling(getShipToBilling());
		bookOrderImpl.setShippingName(getShippingName());
		bookOrderImpl.setShippingCountry(getShippingCountry());
		bookOrderImpl.setShippingCity(getShippingCity());
		bookOrderImpl.setShippingPrefecture(getShippingPrefecture());
		bookOrderImpl.setShippingStreet(getShippingStreet());
		bookOrderImpl.setShippingZip(getShippingZip());
		bookOrderImpl.setPhone(getPhone());
		bookOrderImpl.setTotal(getTotal());
		bookOrderImpl.setTax(getTax());
		bookOrderImpl.setDiscount(getDiscount());
		bookOrderImpl.setShipfee(getShipfee());
		bookOrderImpl.setPayment(getPayment());

		bookOrderImpl.resetOriginalValues();

		return bookOrderImpl;
	}

	@Override
	public int compareTo(BookOrder bookOrder) {
		long primaryKey = bookOrder.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof BookOrder)) {
			return false;
		}

		BookOrder bookOrder = (BookOrder)obj;

		long primaryKey = bookOrder.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BookOrderModelImpl bookOrderModelImpl = this;

		bookOrderModelImpl._originalUuid = bookOrderModelImpl._uuid;

		bookOrderModelImpl._originalGroupId = bookOrderModelImpl._groupId;

		bookOrderModelImpl._setOriginalGroupId = false;

		bookOrderModelImpl._originalCompanyId = bookOrderModelImpl._companyId;

		bookOrderModelImpl._setOriginalCompanyId = false;

		bookOrderModelImpl._originalModifiedDate = bookOrderModelImpl._modifiedDate;

		bookOrderModelImpl._setModifiedDate = false;

		bookOrderModelImpl._originalUserId = bookOrderModelImpl._userId;

		bookOrderModelImpl._setOriginalUserId = false;

		bookOrderModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<BookOrder> toCacheModel() {
		BookOrderCacheModel bookOrderCacheModel = new BookOrderCacheModel();

		bookOrderCacheModel.uuid = getUuid();

		String uuid = bookOrderCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			bookOrderCacheModel.uuid = null;
		}

		bookOrderCacheModel.bookOrderId = getBookOrderId();

		bookOrderCacheModel.groupId = getGroupId();

		bookOrderCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			bookOrderCacheModel.createDate = createDate.getTime();
		}
		else {
			bookOrderCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			bookOrderCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			bookOrderCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		bookOrderCacheModel.userId = getUserId();

		bookOrderCacheModel.userName = getUserName();

		String userName = bookOrderCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			bookOrderCacheModel.userName = null;
		}

		bookOrderCacheModel.status = getStatus();

		String status = bookOrderCacheModel.status;

		if ((status != null) && (status.length() == 0)) {
			bookOrderCacheModel.status = null;
		}

		bookOrderCacheModel.billingName = getBillingName();

		String billingName = bookOrderCacheModel.billingName;

		if ((billingName != null) && (billingName.length() == 0)) {
			bookOrderCacheModel.billingName = null;
		}

		bookOrderCacheModel.billingCountry = getBillingCountry();

		String billingCountry = bookOrderCacheModel.billingCountry;

		if ((billingCountry != null) && (billingCountry.length() == 0)) {
			bookOrderCacheModel.billingCountry = null;
		}

		bookOrderCacheModel.billingCity = getBillingCity();

		String billingCity = bookOrderCacheModel.billingCity;

		if ((billingCity != null) && (billingCity.length() == 0)) {
			bookOrderCacheModel.billingCity = null;
		}

		bookOrderCacheModel.billingPrefecture = getBillingPrefecture();

		String billingPrefecture = bookOrderCacheModel.billingPrefecture;

		if ((billingPrefecture != null) && (billingPrefecture.length() == 0)) {
			bookOrderCacheModel.billingPrefecture = null;
		}

		bookOrderCacheModel.billingStreet = getBillingStreet();

		String billingStreet = bookOrderCacheModel.billingStreet;

		if ((billingStreet != null) && (billingStreet.length() == 0)) {
			bookOrderCacheModel.billingStreet = null;
		}

		bookOrderCacheModel.billingZip = getBillingZip();

		String billingZip = bookOrderCacheModel.billingZip;

		if ((billingZip != null) && (billingZip.length() == 0)) {
			bookOrderCacheModel.billingZip = null;
		}

		bookOrderCacheModel.shipToBilling = getShipToBilling();

		bookOrderCacheModel.shippingName = getShippingName();

		String shippingName = bookOrderCacheModel.shippingName;

		if ((shippingName != null) && (shippingName.length() == 0)) {
			bookOrderCacheModel.shippingName = null;
		}

		bookOrderCacheModel.shippingCountry = getShippingCountry();

		String shippingCountry = bookOrderCacheModel.shippingCountry;

		if ((shippingCountry != null) && (shippingCountry.length() == 0)) {
			bookOrderCacheModel.shippingCountry = null;
		}

		bookOrderCacheModel.shippingCity = getShippingCity();

		String shippingCity = bookOrderCacheModel.shippingCity;

		if ((shippingCity != null) && (shippingCity.length() == 0)) {
			bookOrderCacheModel.shippingCity = null;
		}

		bookOrderCacheModel.shippingPrefecture = getShippingPrefecture();

		String shippingPrefecture = bookOrderCacheModel.shippingPrefecture;

		if ((shippingPrefecture != null) && (shippingPrefecture.length() == 0)) {
			bookOrderCacheModel.shippingPrefecture = null;
		}

		bookOrderCacheModel.shippingStreet = getShippingStreet();

		String shippingStreet = bookOrderCacheModel.shippingStreet;

		if ((shippingStreet != null) && (shippingStreet.length() == 0)) {
			bookOrderCacheModel.shippingStreet = null;
		}

		bookOrderCacheModel.shippingZip = getShippingZip();

		String shippingZip = bookOrderCacheModel.shippingZip;

		if ((shippingZip != null) && (shippingZip.length() == 0)) {
			bookOrderCacheModel.shippingZip = null;
		}

		bookOrderCacheModel.phone = getPhone();

		String phone = bookOrderCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			bookOrderCacheModel.phone = null;
		}

		bookOrderCacheModel.total = getTotal();

		String total = bookOrderCacheModel.total;

		if ((total != null) && (total.length() == 0)) {
			bookOrderCacheModel.total = null;
		}

		bookOrderCacheModel.tax = getTax();

		bookOrderCacheModel.discount = getDiscount();

		bookOrderCacheModel.shipfee = getShipfee();

		String shipfee = bookOrderCacheModel.shipfee;

		if ((shipfee != null) && (shipfee.length() == 0)) {
			bookOrderCacheModel.shipfee = null;
		}

		bookOrderCacheModel.payment = getPayment();

		String payment = bookOrderCacheModel.payment;

		if ((payment != null) && (payment.length() == 0)) {
			bookOrderCacheModel.payment = null;
		}

		return bookOrderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(57);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", bookOrderId=");
		sb.append(getBookOrderId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", billingName=");
		sb.append(getBillingName());
		sb.append(", billingCountry=");
		sb.append(getBillingCountry());
		sb.append(", billingCity=");
		sb.append(getBillingCity());
		sb.append(", billingPrefecture=");
		sb.append(getBillingPrefecture());
		sb.append(", billingStreet=");
		sb.append(getBillingStreet());
		sb.append(", billingZip=");
		sb.append(getBillingZip());
		sb.append(", shipToBilling=");
		sb.append(getShipToBilling());
		sb.append(", shippingName=");
		sb.append(getShippingName());
		sb.append(", shippingCountry=");
		sb.append(getShippingCountry());
		sb.append(", shippingCity=");
		sb.append(getShippingCity());
		sb.append(", shippingPrefecture=");
		sb.append(getShippingPrefecture());
		sb.append(", shippingStreet=");
		sb.append(getShippingStreet());
		sb.append(", shippingZip=");
		sb.append(getShippingZip());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", total=");
		sb.append(getTotal());
		sb.append(", tax=");
		sb.append(getTax());
		sb.append(", discount=");
		sb.append(getDiscount());
		sb.append(", shipfee=");
		sb.append(getShipfee());
		sb.append(", payment=");
		sb.append(getPayment());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(88);

		sb.append("<model><model-name>");
		sb.append("com.nabook.model.BookOrder");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bookOrderId</column-name><column-value><![CDATA[");
		sb.append(getBookOrderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>billingName</column-name><column-value><![CDATA[");
		sb.append(getBillingName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>billingCountry</column-name><column-value><![CDATA[");
		sb.append(getBillingCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>billingCity</column-name><column-value><![CDATA[");
		sb.append(getBillingCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>billingPrefecture</column-name><column-value><![CDATA[");
		sb.append(getBillingPrefecture());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>billingStreet</column-name><column-value><![CDATA[");
		sb.append(getBillingStreet());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>billingZip</column-name><column-value><![CDATA[");
		sb.append(getBillingZip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipToBilling</column-name><column-value><![CDATA[");
		sb.append(getShipToBilling());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shippingName</column-name><column-value><![CDATA[");
		sb.append(getShippingName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shippingCountry</column-name><column-value><![CDATA[");
		sb.append(getShippingCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shippingCity</column-name><column-value><![CDATA[");
		sb.append(getShippingCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shippingPrefecture</column-name><column-value><![CDATA[");
		sb.append(getShippingPrefecture());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shippingStreet</column-name><column-value><![CDATA[");
		sb.append(getShippingStreet());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shippingZip</column-name><column-value><![CDATA[");
		sb.append(getShippingZip());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>total</column-name><column-value><![CDATA[");
		sb.append(getTotal());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tax</column-name><column-value><![CDATA[");
		sb.append(getTax());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>discount</column-name><column-value><![CDATA[");
		sb.append(getDiscount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shipfee</column-name><column-value><![CDATA[");
		sb.append(getShipfee());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payment</column-name><column-value><![CDATA[");
		sb.append(getPayment());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = BookOrder.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			BookOrder.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _bookOrderId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private Date _originalModifiedDate;
	private boolean _setModifiedDate;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private String _status;
	private String _billingName;
	private String _billingCountry;
	private String _billingCity;
	private String _billingPrefecture;
	private String _billingStreet;
	private String _billingZip;
	private boolean _shipToBilling;
	private String _shippingName;
	private String _shippingCountry;
	private String _shippingCity;
	private String _shippingPrefecture;
	private String _shippingStreet;
	private String _shippingZip;
	private String _phone;
	private String _total;
	private int _tax;
	private int _discount;
	private String _shipfee;
	private String _payment;
	private long _columnBitmask;
	private BookOrder _escapedModel;
}