/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nabook.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import com.nabook.model.Book;
import com.nabook.model.BookModel;
import com.nabook.model.BookSampleBlobModel;
import com.nabook.model.BookThumbnailBlobModel;

import com.nabook.service.BookLocalServiceUtil;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Book service. Represents a row in the &quot;nab_Book&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link BookModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookImpl}.
 * </p>
 *
 * @author phantoan
 * @see BookImpl
 * @see Book
 * @see BookModel
 * @generated
 */
@ProviderType
public class BookModelImpl extends BaseModelImpl<Book> implements BookModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a book model instance should use the {@link Book} interface instead.
	 */
	public static final String TABLE_NAME = "nab_Book";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "bookId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "ISBN", Types.VARCHAR },
			{ "title", Types.VARCHAR },
			{ "subtitle", Types.VARCHAR },
			{ "edition", Types.VARCHAR },
			{ "volume", Types.VARCHAR },
			{ "publisher", Types.VARCHAR },
			{ "pubDate", Types.TIMESTAMP },
			{ "price", Types.VARCHAR },
			{ "description", Types.VARCHAR },
			{ "thumbnail", Types.BLOB },
			{ "sample", Types.BLOB }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bookId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ISBN", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subtitle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("edition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("volume", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("publisher", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pubDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("price", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("thumbnail", Types.BLOB);
		TABLE_COLUMNS_MAP.put("sample", Types.BLOB);
	}

	public static final String TABLE_SQL_CREATE = "create table nab_Book (uuid_ VARCHAR(75) null,bookId LONG not null primary key,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,userId LONG,userName VARCHAR(75) null,ISBN VARCHAR(75) null,title VARCHAR(255) null,subtitle VARCHAR(255) null,edition VARCHAR(50) null,volume VARCHAR(50) null,publisher VARCHAR(255) null,pubDate DATE null,price VARCHAR(12) null,description VARCHAR(1000) null,thumbnail BLOB,sample BLOB)";
	public static final String TABLE_SQL_DROP = "drop table nab_Book";
	public static final String ORDER_BY_JPQL = " ORDER BY book.title ASC, book.pubDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY nab_Book.title ASC, nab_Book.pubDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.nabook.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.nabook.model.Book"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.nabook.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.nabook.model.Book"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.nabook.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.nabook.model.Book"),
			true);
	public static final long ISBN_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long PUBLISHER_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long TITLE_COLUMN_BITMASK = 32L;
	public static final long PUBDATE_COLUMN_BITMASK = 64L;
	public static final String MAPPING_TABLE_NAB_BOOKS_AUTHORS_NAME = "nab_Books_Authors";
	public static final Object[][] MAPPING_TABLE_NAB_BOOKS_AUTHORS_COLUMNS = {
			{ "companyId", Types.BIGINT },
			{ "authorId", Types.BIGINT },
			{ "bookId", Types.BIGINT }
		};
	public static final String MAPPING_TABLE_NAB_BOOKS_AUTHORS_SQL_CREATE = "create table nab_Books_Authors (companyId LONG not null,authorId LONG not null,bookId LONG not null,primary key (authorId, bookId))";
	public static final boolean FINDER_CACHE_ENABLED_NAB_BOOKS_AUTHORS = GetterUtil.getBoolean(com.nabook.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.nab_Books_Authors"), true);
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.nabook.service.util.ServiceProps.get(
				"lock.expiration.time.com.nabook.model.Book"));

	public BookModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bookId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBookId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bookId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Book.class;
	}

	@Override
	public String getModelClassName() {
		return Book.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("bookId", getBookId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("ISBN", getISBN());
		attributes.put("title", getTitle());
		attributes.put("subtitle", getSubtitle());
		attributes.put("edition", getEdition());
		attributes.put("volume", getVolume());
		attributes.put("publisher", getPublisher());
		attributes.put("pubDate", getPubDate());
		attributes.put("price", getPrice());
		attributes.put("description", getDescription());
		attributes.put("thumbnail", getThumbnail());
		attributes.put("sample", getSample());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long bookId = (Long)attributes.get("bookId");

		if (bookId != null) {
			setBookId(bookId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		String ISBN = (String)attributes.get("ISBN");

		if (ISBN != null) {
			setISBN(ISBN);
		}

		String title = (String)attributes.get("title");

		if (title != null) {
			setTitle(title);
		}

		String subtitle = (String)attributes.get("subtitle");

		if (subtitle != null) {
			setSubtitle(subtitle);
		}

		String edition = (String)attributes.get("edition");

		if (edition != null) {
			setEdition(edition);
		}

		String volume = (String)attributes.get("volume");

		if (volume != null) {
			setVolume(volume);
		}

		String publisher = (String)attributes.get("publisher");

		if (publisher != null) {
			setPublisher(publisher);
		}

		Date pubDate = (Date)attributes.get("pubDate");

		if (pubDate != null) {
			setPubDate(pubDate);
		}

		String price = (String)attributes.get("price");

		if (price != null) {
			setPrice(price);
		}

		String description = (String)attributes.get("description");

		if (description != null) {
			setDescription(description);
		}

		Blob thumbnail = (Blob)attributes.get("thumbnail");

		if (thumbnail != null) {
			setThumbnail(thumbnail);
		}

		Blob sample = (Blob)attributes.get("sample");

		if (sample != null) {
			setSample(sample);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getBookId() {
		return _bookId;
	}

	@Override
	public void setBookId(long bookId) {
		_bookId = bookId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public String getISBN() {
		if (_ISBN == null) {
			return StringPool.BLANK;
		}
		else {
			return _ISBN;
		}
	}

	@Override
	public void setISBN(String ISBN) {
		_columnBitmask |= ISBN_COLUMN_BITMASK;

		if (_originalISBN == null) {
			_originalISBN = _ISBN;
		}

		_ISBN = ISBN;
	}

	public String getOriginalISBN() {
		return GetterUtil.getString(_originalISBN);
	}

	@Override
	public String getTitle() {
		if (_title == null) {
			return StringPool.BLANK;
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		_columnBitmask = -1L;

		_title = title;
	}

	@Override
	public String getSubtitle() {
		if (_subtitle == null) {
			return StringPool.BLANK;
		}
		else {
			return _subtitle;
		}
	}

	@Override
	public void setSubtitle(String subtitle) {
		_subtitle = subtitle;
	}

	@Override
	public String getEdition() {
		if (_edition == null) {
			return StringPool.BLANK;
		}
		else {
			return _edition;
		}
	}

	@Override
	public void setEdition(String edition) {
		_edition = edition;
	}

	@Override
	public String getVolume() {
		if (_volume == null) {
			return StringPool.BLANK;
		}
		else {
			return _volume;
		}
	}

	@Override
	public void setVolume(String volume) {
		_volume = volume;
	}

	@Override
	public String getPublisher() {
		if (_publisher == null) {
			return StringPool.BLANK;
		}
		else {
			return _publisher;
		}
	}

	@Override
	public void setPublisher(String publisher) {
		_columnBitmask |= PUBLISHER_COLUMN_BITMASK;

		if (_originalPublisher == null) {
			_originalPublisher = _publisher;
		}

		_publisher = publisher;
	}

	public String getOriginalPublisher() {
		return GetterUtil.getString(_originalPublisher);
	}

	@Override
	public Date getPubDate() {
		return _pubDate;
	}

	@Override
	public void setPubDate(Date pubDate) {
		_columnBitmask = -1L;

		_pubDate = pubDate;
	}

	@Override
	public String getPrice() {
		if (_price == null) {
			return StringPool.BLANK;
		}
		else {
			return _price;
		}
	}

	@Override
	public void setPrice(String price) {
		_price = price;
	}

	@Override
	public String getDescription() {
		if (_description == null) {
			return StringPool.BLANK;
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public Blob getThumbnail() {
		if (_thumbnailBlobModel == null) {
			try {
				_thumbnailBlobModel = BookLocalServiceUtil.getThumbnailBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_thumbnailBlobModel != null) {
			blob = _thumbnailBlobModel.getThumbnailBlob();
		}

		return blob;
	}

	@Override
	public void setThumbnail(Blob thumbnail) {
		if (_thumbnailBlobModel == null) {
			_thumbnailBlobModel = new BookThumbnailBlobModel(getPrimaryKey(),
					thumbnail);
		}
		else {
			_thumbnailBlobModel.setThumbnailBlob(thumbnail);
		}
	}

	@Override
	public Blob getSample() {
		if (_sampleBlobModel == null) {
			try {
				_sampleBlobModel = BookLocalServiceUtil.getSampleBlobModel(getPrimaryKey());
			}
			catch (Exception e) {
			}
		}

		Blob blob = null;

		if (_sampleBlobModel != null) {
			blob = _sampleBlobModel.getSampleBlob();
		}

		return blob;
	}

	@Override
	public void setSample(Blob sample) {
		if (_sampleBlobModel == null) {
			_sampleBlobModel = new BookSampleBlobModel(getPrimaryKey(), sample);
		}
		else {
			_sampleBlobModel.setSampleBlob(sample);
		}
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				Book.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Book.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Book toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Book)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BookImpl bookImpl = new BookImpl();

		bookImpl.setUuid(getUuid());
		bookImpl.setBookId(getBookId());
		bookImpl.setGroupId(getGroupId());
		bookImpl.setCompanyId(getCompanyId());
		bookImpl.setCreateDate(getCreateDate());
		bookImpl.setModifiedDate(getModifiedDate());
		bookImpl.setUserId(getUserId());
		bookImpl.setUserName(getUserName());
		bookImpl.setISBN(getISBN());
		bookImpl.setTitle(getTitle());
		bookImpl.setSubtitle(getSubtitle());
		bookImpl.setEdition(getEdition());
		bookImpl.setVolume(getVolume());
		bookImpl.setPublisher(getPublisher());
		bookImpl.setPubDate(getPubDate());
		bookImpl.setPrice(getPrice());
		bookImpl.setDescription(getDescription());

		bookImpl.resetOriginalValues();

		return bookImpl;
	}

	@Override
	public int compareTo(Book book) {
		int value = 0;

		value = getTitle().compareToIgnoreCase(book.getTitle());

		if (value != 0) {
			return value;
		}

		value = DateUtil.compareTo(getPubDate(), book.getPubDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Book)) {
			return false;
		}

		Book book = (Book)obj;

		long primaryKey = book.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		BookModelImpl bookModelImpl = this;

		bookModelImpl._originalUuid = bookModelImpl._uuid;

		bookModelImpl._originalGroupId = bookModelImpl._groupId;

		bookModelImpl._setOriginalGroupId = false;

		bookModelImpl._originalCompanyId = bookModelImpl._companyId;

		bookModelImpl._setOriginalCompanyId = false;

		bookModelImpl._setModifiedDate = false;

		bookModelImpl._originalISBN = bookModelImpl._ISBN;

		bookModelImpl._originalPublisher = bookModelImpl._publisher;

		bookModelImpl._thumbnailBlobModel = null;

		bookModelImpl._sampleBlobModel = null;

		bookModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Book> toCacheModel() {
		BookCacheModel bookCacheModel = new BookCacheModel();

		bookCacheModel.uuid = getUuid();

		String uuid = bookCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			bookCacheModel.uuid = null;
		}

		bookCacheModel.bookId = getBookId();

		bookCacheModel.groupId = getGroupId();

		bookCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			bookCacheModel.createDate = createDate.getTime();
		}
		else {
			bookCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			bookCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			bookCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		bookCacheModel.userId = getUserId();

		bookCacheModel.userName = getUserName();

		String userName = bookCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			bookCacheModel.userName = null;
		}

		bookCacheModel.ISBN = getISBN();

		String ISBN = bookCacheModel.ISBN;

		if ((ISBN != null) && (ISBN.length() == 0)) {
			bookCacheModel.ISBN = null;
		}

		bookCacheModel.title = getTitle();

		String title = bookCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			bookCacheModel.title = null;
		}

		bookCacheModel.subtitle = getSubtitle();

		String subtitle = bookCacheModel.subtitle;

		if ((subtitle != null) && (subtitle.length() == 0)) {
			bookCacheModel.subtitle = null;
		}

		bookCacheModel.edition = getEdition();

		String edition = bookCacheModel.edition;

		if ((edition != null) && (edition.length() == 0)) {
			bookCacheModel.edition = null;
		}

		bookCacheModel.volume = getVolume();

		String volume = bookCacheModel.volume;

		if ((volume != null) && (volume.length() == 0)) {
			bookCacheModel.volume = null;
		}

		bookCacheModel.publisher = getPublisher();

		String publisher = bookCacheModel.publisher;

		if ((publisher != null) && (publisher.length() == 0)) {
			bookCacheModel.publisher = null;
		}

		Date pubDate = getPubDate();

		if (pubDate != null) {
			bookCacheModel.pubDate = pubDate.getTime();
		}
		else {
			bookCacheModel.pubDate = Long.MIN_VALUE;
		}

		bookCacheModel.price = getPrice();

		String price = bookCacheModel.price;

		if ((price != null) && (price.length() == 0)) {
			bookCacheModel.price = null;
		}

		bookCacheModel.description = getDescription();

		String description = bookCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			bookCacheModel.description = null;
		}

		return bookCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", bookId=");
		sb.append(getBookId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", ISBN=");
		sb.append(getISBN());
		sb.append(", title=");
		sb.append(getTitle());
		sb.append(", subtitle=");
		sb.append(getSubtitle());
		sb.append(", edition=");
		sb.append(getEdition());
		sb.append(", volume=");
		sb.append(getVolume());
		sb.append(", publisher=");
		sb.append(getPublisher());
		sb.append(", pubDate=");
		sb.append(getPubDate());
		sb.append(", price=");
		sb.append(getPrice());
		sb.append(", description=");
		sb.append(getDescription());

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("com.nabook.model.Book");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bookId</column-name><column-value><![CDATA[");
		sb.append(getBookId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ISBN</column-name><column-value><![CDATA[");
		sb.append(getISBN());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>title</column-name><column-value><![CDATA[");
		sb.append(getTitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subtitle</column-name><column-value><![CDATA[");
		sb.append(getSubtitle());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>edition</column-name><column-value><![CDATA[");
		sb.append(getEdition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>volume</column-name><column-value><![CDATA[");
		sb.append(getVolume());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publisher</column-name><column-value><![CDATA[");
		sb.append(getPublisher());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pubDate</column-name><column-value><![CDATA[");
		sb.append(getPubDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>price</column-name><column-value><![CDATA[");
		sb.append(getPrice());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>description</column-name><column-value><![CDATA[");
		sb.append(getDescription());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Book.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Book.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _bookId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _userId;
	private String _userName;
	private String _ISBN;
	private String _originalISBN;
	private String _title;
	private String _subtitle;
	private String _edition;
	private String _volume;
	private String _publisher;
	private String _originalPublisher;
	private Date _pubDate;
	private String _price;
	private String _description;
	private BookThumbnailBlobModel _thumbnailBlobModel;
	private BookSampleBlobModel _sampleBlobModel;
	private long _columnBitmask;
	private Book _escapedModel;
}